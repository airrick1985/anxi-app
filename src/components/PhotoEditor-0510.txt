<template>
  <v-dialog
    v-model="open"
    scrollable
    persistent
    no-click-animation
    :close-on-back="false"
    :attach="'body'"
    :retain-focus="false"
    content-class="image-editor-dialog-content"
    :max-width="isMobile ? '95vw' : '1000px'"
    :fullscreen="isMobile"
  >
    <v-card class="d-flex flex-column" style="overflow: hidden; position: relative;">
      
      <!-- ✅ 操作按鈕放右上角 -->
      <div style="position: absolute; top: 8px; right: 8px; z-index: 10;">
        <v-btn icon @click="$emit('cancel')">
          <v-icon>mdi-close</v-icon>
        </v-btn>
        <v-btn icon color="primary" @click="exportImage">
          <v-icon>mdi-check</v-icon>
        </v-btn>
      </div>

      <!-- 編輯畫布 -->
      <div class="editor-wrapper" ref="editorWrapperRef">
        <canvas ref="canvasEl" class="editor-canvas" />
      </div>

      <!-- ✅ 工具列放底部一排 -->
      <v-toolbar
  flat
  color="primary"
  dark
  density="compact"
  class="editor-toolbar-bottom"
>
  <div class="toolbar-row d-flex align-center flex-wrap w-100">
    <!-- 工具選單 -->
    <v-menu>
      <template #activator="{ props }">
        <v-btn icon density="compact" v-bind="props">
          <v-icon small>mdi-wrench</v-icon>
        </v-btn>
      </template>
      <v-list dense>
        <v-list-item
          v-for="t in tools"
          :key="t.tool"
          @click="t.isEmoji ? selectEmoji(t.tool) : selectTool(t.tool)"
        >
          <v-list-item-title>
            <v-icon small :color="currentTool === t.tool ? 'yellow lighten-3' : ''" class="mr-2">
              {{ t.icon }}
            </v-icon>
            {{ t.name }}
          </v-list-item-title>
        </v-list-item>
      </v-list>
    </v-menu>

    <!-- 橡皮擦 -->
    <v-btn icon density="compact" @click="selectTool('removeOne')" :title="'橡皮擦（刪除物件）'">
      <v-icon small :color="currentTool === 'removeOne' ? 'yellow lighten-3' : ''">mdi-eraser</v-icon>
    </v-btn>

<!-- 清除功能 -->
<v-menu>
  <template #activator="{ props }">
    <v-btn icon density="compact" v-bind="props">
      <v-icon small>mdi-delete</v-icon>
    </v-btn>
  </template>
  <v-list dense>
    <v-list-item @click="clearSelected">
      <v-list-item-title>僅選取</v-list-item-title>
    </v-list-item>
    <v-list-item @click="clearAllObjects">
      <v-list-item-title>全部清空</v-list-item-title>
    </v-list-item>
  </v-list>
</v-menu>



    <!-- 顏色選擇 -->
    <v-menu>
      <template #activator="{ props }">
        <v-btn icon density="compact" v-bind="props">
          <v-icon small>mdi-palette</v-icon>
        </v-btn>
      </template>
      <v-color-picker
        v-model="strokeColor"
        hide-inputs
        hide-mode-switch
        style="max-width: 250px"
      />
    </v-menu>

    <!-- 筆刷粗細 -->
    <v-menu>
      <template #activator="{ props }">
        <v-btn icon density="compact" v-bind="props" :title="'畫筆粗細'">
          <v-icon small>mdi-pencil</v-icon>
        </v-btn>
      </template>
      <div class="custom-slider-popup">
        <span class="text-caption text-white">筆刷粗細：{{ strokeWidth }}</span>
        <v-slider
          v-model="strokeWidth"
          min="1"
          max="20"
          step="1"
          hide-details
          density="compact"
          track-color="white"
          track-fill-color="white"
          thumb-color="white"
        />
      </div>
    </v-menu>

  </div>
</v-toolbar>

    </v-card>
  </v-dialog>
</template>



<script setup lang="js">
import { ref, onMounted, nextTick, watch, onUnmounted, computed } from 'vue'
import { fabric } from 'fabric'
import { compressToFile } from '@/utils/canvasCompress';

const isPanning = ref(false);
let lastPanPoint = null;

const props = defineProps(['file', 'modelValue'])
const emit = defineEmits(['update:modelValue', 'done', 'cancel'])

const open = ref(props.modelValue)
watch(() => props.modelValue, v => (open.value = v))
watch(open, v => emit('update:modelValue', v))

const canvasEl = ref(null)
let canvas = null
const strokeColor = ref('#f00')
const strokeWidth = ref(3)
const currentTool = ref(null)
let startX = 0
let startY = 0
let tempObject = null

const toolbarRef = ref(null)
const editorWrapperRef = ref(null)

const isMobile = computed(() => {
  if (typeof window !== 'undefined') {
    return window.innerWidth < 768
  }
  return false
})

const tools = [
  { name: '矩形', icon: 'mdi-rectangle-outline', tool: 'rect' },
  { name: '圓形', icon: 'mdi-circle-outline', tool: 'circle' },
  { name: '直線', icon: 'mdi-minus', tool: 'line' },
  { name: '畫筆', icon: 'mdi-pencil', tool: 'pencil' },
  { name: '文字', icon: 'mdi-format-text', tool: 'text' },
  { name: '箭頭', icon: 'mdi-arrow-right-bold', tool: '➡︎', isEmoji: true }
]

const selectedEmoji = ref(null)
function selectEmoji(emoji) {
  selectedEmoji.value = emoji
  currentTool.value = 'emoji'
  updateCursor()
}

function selectTool(tool) {
  const activeObj = canvas?.getActiveObject();
  if (activeObj && activeObj.type === 'i-text' && activeObj.isEditing) return;
  document.activeElement?.blur();

  currentTool.value = tool;

  if (canvas) {
    canvas.isDrawingMode = tool === 'pencil';
    if (tool === 'pencil') {
      canvas.freeDrawingBrush.color = strokeColor.value;
      canvas.freeDrawingBrush.width = parseInt(strokeWidth.value, 10);
    }

    if (tool === 'move') {
      canvas.selection = false;
      canvas.defaultCursor = 'grab';
      canvas.setCursor('grab');
      canvas.forEachObject(obj => {
        obj.selectable = false;
        obj.evented = false;
      });
    } else {
      canvas.selection = true;
      canvas.defaultCursor = 'default';
      canvas.forEachObject(obj => {
        if (obj !== canvas.backgroundImage) {
          obj.selectable = true;
          obj.evented = true;
        }
      });
      updateCursor();
    }
  }

  updateCursor();
}

function updateCursor() {
  if (!canvasEl.value) return
  const cursorMap = {
    rect: 'crosshair',
    circle: 'crosshair',
    line: 'crosshair',
    pencil: 'url("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@5.15.4/svgs/solid/pen.svg") 2 32, auto',
    text: 'text',
    emoji: 'crosshair'
  }
  canvasEl.value.style.cursor = cursorMap[currentTool.value] || 'default'
}

watch(strokeColor, (newColor) => {
  if (canvas && currentTool.value === 'pencil') {
    canvas.freeDrawingBrush.color = newColor
  }
  const activeObj = canvas?.getActiveObject()
  if (activeObj && activeObj.set && activeObj.type !== 'image') {
    activeObj.set('stroke', newColor)
    canvas.renderAll()
  }
})

watch(strokeWidth, (newWidth) => {
  if (canvas && currentTool.value === 'pencil') {
    canvas.freeDrawingBrush.width = parseInt(newWidth, 10)
  }
  const activeObj = canvas?.getActiveObject()
  if (activeObj && activeObj.set && activeObj.type !== 'image') {
    activeObj.set('strokeWidth', parseInt(newWidth, 10))
    canvas.renderAll()
  }
})

function resizeCanvasAndBackground() {
  if (!canvas || !canvas.backgroundImage || !editorWrapperRef.value) return;
  if (canvas.getZoom() !== 1) return;

  const fabricImage = canvas.backgroundImage;
  const wrapper = editorWrapperRef.value;
  const scale = Math.min(wrapper.clientWidth / fabricImage.width, wrapper.clientHeight / fabricImage.height);

  canvas.setWidth(fabricImage.width * scale);
  canvas.setHeight(fabricImage.height * scale);
  fabricImage.scale(scale);
  canvas.renderAll();
}

onMounted(() => nextTick(initCanvas))

function initCanvas() {
  if (canvas) {
    canvas.dispose();
    canvas = null;
  }

  canvas = new fabric.Canvas(canvasEl.value, {
    selection: true,
    fireRightClick: true,
    stopContextMenu: true,
    imageSmoothingEnabled: true,
  });

  canvas.upperCanvasEl.removeAttribute('tabindex');

  const url = URL.createObjectURL(props.file);
  fabric.Image.fromURL(url, (img) => {
    img.set({
      selectable: false,
      evented: false,
      hasBorders: false,
      hasControls: false,
      hoverCursor: 'default'
    });

    canvas.setBackgroundImage(img, () => {
      nextTick(() => resizeCanvasAndBackground());
      canvas.renderAll();
    });
    canvas.sendToBack(img);
  }, { crossOrigin: 'anonymous' });

  let resizeObserver = null;
  onMounted(() => {
    if (editorWrapperRef.value) {
      resizeObserver = new ResizeObserver(() => resizeCanvasAndBackground());
      resizeObserver.observe(editorWrapperRef.value);
    }
  });
  onUnmounted(() => {
    if (canvas) canvas.dispose();
    if (resizeObserver && editorWrapperRef.value) resizeObserver.unobserve(editorWrapperRef.value);
    if (resizeObserver) resizeObserver.disconnect();
  });

  const originalEnterEditing = fabric.IText.prototype.enterEditing;
  fabric.IText.prototype.enterEditing = function (e) {
    const result = originalEnterEditing.call(this, e);
    if (this.hiddenTextarea) {
      this.hiddenTextarea.style.zIndex = '9999';
      setTimeout(() => this.hiddenTextarea.focus(), 50);
    }
    return result;
  };

  canvas.on('mouse:down', (e) => {
    const pointer = canvas.getPointer(e.e);
    if (!pointer || isNaN(pointer.x) || isNaN(pointer.y)) return;

    const target = e.target;

    if (currentTool.value === 'removeOne') {
      if (target && target instanceof fabric.Object && target !== canvas.backgroundImage) {
        canvas.remove(target);
        canvas.renderAll();
      }
      return;
    }

    if (currentTool.value === 'move' || e.e.altKey || e.e.pointerType === 'touch') {
      isPanning.value = true;
      canvas.setCursor('grab');
      canvas.renderAll();
      return;
    }

    if (currentTool.value === 'emoji' && selectedEmoji.value) {
      const t = new fabric.IText(selectedEmoji.value, {
        left: pointer.x,
        top: pointer.y,
        fill: strokeColor.value,
        fontSize: selectedEmoji.value === '➡︎' ? 120 : 60,
        editable: true,
        selectable: true
      });
      canvas.add(t).setActiveObject(t);
      canvas.renderAll();
      selectedEmoji.value = null;
      if (!['pencil', 'removeOne'].includes(currentTool.value)) currentTool.value = null;
      return;
    }

    if (currentTool.value === 'text') {
      const t = new fabric.IText('請輸入文字', {
        left: pointer.x,
        top: pointer.y,
        fill: strokeColor.value,
        fontSize: 36,
        editable: true,
        selectable: true
      });
      canvas.add(t).setActiveObject(t);
      document.activeElement?.blur();
      setTimeout(() => {
        t.enterEditing();
        canvas.renderAll();
      }, 100);
      if (!['pencil', 'removeOne'].includes(currentTool.value)) currentTool.value = null;
      return;
    }

    if (!currentTool.value || currentTool.value === 'pencil') return;

    startX = pointer.x;
    startY = pointer.y;

    switch (currentTool.value) {
      case 'rect':
        tempObject = new fabric.Rect({
          left: startX,
          top: startY,
          width: 1,
          height: 1,
          stroke: strokeColor.value,
          strokeWidth: strokeWidth.value,
          fill: 'transparent'
        });
        break;
      case 'circle':
        tempObject = new fabric.Ellipse({
          left: startX,
          top: startY,
          rx: 1,
          ry: 1,
          stroke: strokeColor.value,
          strokeWidth: strokeWidth.value,
          fill: 'transparent'
        });
        break;
      case 'line':
        tempObject = new fabric.Line([startX, startY, startX, startY], {
          stroke: strokeColor.value,
          strokeWidth: strokeWidth.value
        });
        break;
    }

    if (tempObject) canvas.add(tempObject);
  });

  canvas.on('mouse:move', (e) => {
    if (isPanning.value && e.e) {
      canvas.relativePan(new fabric.Point(e.e.movementX, e.e.movementY));
      return;
    }

    if (!tempObject) return;
    const pointer = canvas.getPointer(e.e);
    const w = pointer.x - startX;
    const h = pointer.y - startY;

    if (tempObject.type === 'rect') {
      tempObject.set({
        width: Math.abs(w),
        height: Math.abs(h),
        left: w < 0 ? pointer.x : startX,
        top: h < 0 ? pointer.y : startY
      });
    } else if (tempObject.type === 'ellipse') {
      tempObject.set({
        rx: Math.abs(w) / 2,
        ry: Math.abs(h) / 2,
        left: Math.min(startX, pointer.x),
        top: Math.min(startY, pointer.y)
      });
    } else if (tempObject.type === 'line') {
      tempObject.set({ x2: pointer.x, y2: pointer.y });
    }

    canvas.renderAll();
  });

  canvas.on('mouse:up', () => {
    tempObject = null;
    isPanning.value = false;
    canvas.setCursor('default');
    if (!['pencil', 'removeOne'].includes(currentTool.value)) {
      currentTool.value = null;
    }
  });

  canvas.on('mouse:wheel', (opt) => {
    let zoom = canvas.getZoom() * 0.999 ** opt.e.deltaY;
    zoom = Math.max(1, Math.min(3, zoom));
    canvas.setZoom(zoom);
    limitViewportWithinCanvas();
    canvasZoom.value = zoom;
    opt.e.preventDefault();
    opt.e.stopPropagation();
  });

  canvas.on('mouse:move', (opt) => {
    if (isPanning.value && opt.e) {
      canvas.relativePan(new fabric.Point(opt.e.movementX, opt.e.movementY));
      limitViewportWithinCanvas();
    }
  });

  canvas.on('mouse:dblclick', (e) => {
    if (e.target?.type === 'i-text') {
      e.e?.stopPropagation();
      document.activeElement?.blur();
      e.target.enterEditing();
      canvas.renderAll();
    }
  });
}

function limitViewportWithinCanvas() {
  const zoom = canvas.getZoom();
  const vp = canvas.viewportTransform;
  const canvasWidth = canvas.getWidth();
  const canvasHeight = canvas.getHeight();
  const bgWidth = canvas.backgroundImage.width * zoom;
  const bgHeight = canvas.backgroundImage.height * zoom;

  const minPanX = canvasWidth - bgWidth;
  const minPanY = canvasHeight - bgHeight;

  if (vp[4] > 0) vp[4] = 0;
  if (vp[5] > 0) vp[5] = 0;
  if (vp[4] < minPanX) vp[4] = minPanX;
  if (vp[5] < minPanY) vp[5] = minPanY;

  canvas.setViewportTransform(vp);
}

function clearAllObjects() {
  if (!canvas) return;
  canvas.getObjects().forEach(obj => {
    if (obj !== canvas.backgroundImage) canvas.remove(obj)
  });
  canvas.renderAll();
}

function clearSelected() {
  if (!canvas) return;

  const activeObject = canvas.getActiveObject();
  if (!activeObject) return;

  if (activeObject.type === 'activeSelection') {
    activeObject.forEachObject(obj => {
      if (obj !== canvas.backgroundImage) {
        canvas.remove(obj);
      }
    });
  } else {
    if (activeObject !== canvas.backgroundImage) {
      canvas.remove(activeObject);
    }
  }

  canvas.discardActiveObject();
  canvas.renderAll();
}

function handleKeydown(e) {
  if (e.key === 'Delete' && canvas?.getActiveObject()) {
    e.preventDefault();
    clearSelected();
  }
}

onMounted(() => window.addEventListener('keydown', handleKeydown))
onUnmounted(() => window.removeEventListener('keydown', handleKeydown))

const canvasZoom = ref(1);
function updateZoom(value) {
  if (canvas) {
    canvas.setZoom(value);
    limitViewportWithinCanvas();
  }
}

async function exportImage() {
  if (!canvas) return;
  canvas.discardActiveObject().renderAll();
  await new Promise(resolve => setTimeout(resolve, 50));

  const dataURL = canvas.toDataURL({ format: 'image/jpeg', quality: 0.92 });
  const blob = await (await fetch(dataURL)).blob();
  const originalFile = new File([blob], props.file?.name || 'annotated.jpg', { type: 'image/jpeg' });
  const compressed = await compressToFile(originalFile, 1024, 0.85);
  emit('done', compressed);
  open.value = false;
}
</script>


<style scoped>
.editor-wrapper {
  flex-grow: 1;
  display: flex;
  justify-content: center;
  align-items: center;
  overflow: auto;
  min-height: 0;
  background-color: #f0f0f0;
  padding: 10px 10px 40px 10px; /* ✅ 原為 60px，減少底部預留 */
}

.editor-canvas {
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
}

:global(.image-editor-dialog-content) {
  margin: 0 !important;
  height: 100% !important;
  max-height: 100% !important;
  overflow-y: hidden;
}

:global(.image-editor-dialog-content > .v-card) {
  height: 100%;
  border-radius: 0 !important;
}

.toolbar-row {
  gap: 10px;
  flex-wrap: wrap;
  align-items: center;
}

.custom-slider-popup {
  background-color: rgba(0, 0, 0, 0.6); /* 60% 黑底 */
  padding: 12px;
  border-radius: 8px;
  width: 180px;
}

:deep(.editor-toolbar-bottom) {
  padding: 6px 20px !important;
  flex-wrap: wrap !important;
  gap: 10px !important;
  min-height: 48px !important;
  justify-content: space-between !important;
}


</style>

